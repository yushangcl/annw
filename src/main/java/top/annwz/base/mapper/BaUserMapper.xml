<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.annwz.base.mapper.BaUserMapper">
  <resultMap id="BaseResultMap" type="top.annwz.base.entity.BaUser">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="password_change_next" jdbcType="INTEGER" property="passwordChangeNext" />
    <result column="locked" jdbcType="INTEGER" property="locked" />
    <result column="locked_date" jdbcType="DATE" property="lockedDate" />
    <result column="face_url" jdbcType="VARCHAR" property="faceUrl" />
    <result column="create_time" jdbcType="DATE" property="createTime" />
    <result column="update_time" jdbcType="DATE" property="updateTime" />
    <result column="create_user_id" jdbcType="INTEGER" property="createUserId" />
    <result column="update_user_id" jdbcType="INTEGER" property="updateUserId" />
    <result column="email_status" jdbcType="INTEGER" property="emailStatus" />
  </resultMap>
  <sql id="Base_Column_List">
    user_id, user_name, password, mobile, email, password_change_next, locked, locked_date, 
    face_url, create_time, update_time, create_user_id, update_user_id, email_status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from ba_user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from ba_user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="top.annwz.base.entity.BaUser">
    insert into ba_user (user_id, user_name, password,
      mobile, email, password_change_next,
      locked, locked_date, face_url,
      create_time, update_time, create_user_id,
      update_user_id, email_status)
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{mobile,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{passwordChangeNext,jdbcType=INTEGER},
      #{locked,jdbcType=INTEGER}, sysdate(), #{faceUrl,jdbcType=VARCHAR},
      sysdate(), sysdate(), #{createUserId,jdbcType=INTEGER},
      #{updateUserId,jdbcType=INTEGER},#{emailStatus,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="top.annwz.base.entity.BaUser">
    insert into ba_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="passwordChangeNext != null">
        password_change_next,
      </if>
      <if test="locked != null">
        locked,
      </if>
      <if test="lockedDate != null">
        locked_date,
      </if>
      <if test="faceUrl != null">
        face_url,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
      <if test="updateUserId != null">
        update_user_id,
      </if>
      <if test="emailStatus != null">
        email_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="passwordChangeNext != null">
        #{passwordChangeNext,jdbcType=INTEGER},
      </if>
      <if test="locked != null">
        #{locked,jdbcType=INTEGER},
      </if>
      <if test="lockedDate != null">
        #{lockedDate,jdbcType=DATE},
      </if>
      <if test="faceUrl != null">
        #{faceUrl,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=DATE},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=DATE},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="updateUserId != null">
        #{updateUserId,jdbcType=INTEGER},
      </if>
      <if test="emailStatus != null">
        #{emailStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="top.annwz.base.entity.BaUser">
    update ba_user
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="passwordChangeNext != null">
        password_change_next = #{passwordChangeNext,jdbcType=INTEGER},
      </if>
      <if test="locked != null">
        locked = #{locked,jdbcType=INTEGER},
      </if>
      <if test="lockedDate != null">
        locked_date = #{lockedDate,jdbcType=DATE},
      </if>
      <if test="faceUrl != null">
        face_url = #{faceUrl,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=DATE},
      </if>
      <if test="updateUserId != null">
        update_user_id = #{updateUserId,jdbcType=INTEGER},
      </if>
      <if test="emailStatus != null">
        email_status = #{emailStatus,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="top.annwz.base.entity.BaUser">
    update ba_user
    set user_name = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      password_change_next = #{passwordChangeNext,jdbcType=INTEGER},
      locked = #{locked,jdbcType=INTEGER},
      locked_date = #{lockedDate,jdbcType=DATE},
      face_url = #{faceUrl,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=DATE},
      update_user_id = #{updateUserId,jdbcType=INTEGER},
      email_status = #{emailStatus,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <select id="getsByMap" parameterType="java.util.HashMap" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from ba_user
    where 1=1
    <foreach collection="map.keys" item="_itemKey" open=""  separator="">
      <if test="null != map[_itemKey]">
        and ${_itemKey} = #{map[${_itemKey}]}
      </if>
    </foreach>
  </select>
  <select id="getCountByMap" parameterType="java.util.HashMap" resultType="java.lang.Integer" >
    select count(1)
    from ba_user
    where 1=1
    <foreach collection="map.keys" item="_itemKey" open=""  separator="">
      <if test="null != map[_itemKey]">
        and ${_itemKey} = #{map[${_itemKey}]}
      </if>
    </foreach>
  </select>

  <select id="getByEmail" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from ba_user
    where email = #{email}
  </select>
  <update id="updateStatusByEmail">
    update ba_user
    set  email_status = 1,
        update_time = sysdate()
    where email = #{email}
  </update>
</mapper>